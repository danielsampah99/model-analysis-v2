/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RunDataRouteImport } from './routes/run-data'
import { Route as ParamsRouteImport } from './routes/params'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProviderPartnerIndexRouteImport } from './routes/provider-partner/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as DemoFormSimpleRouteImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo.form.address'

const RunDataRoute = RunDataRouteImport.update({
  id: '/run-data',
  path: '/run-data',
  getParentRoute: () => rootRouteImport,
} as any)
const ParamsRoute = ParamsRouteImport.update({
  id: '/params',
  path: '/params',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProviderPartnerIndexRoute = ProviderPartnerIndexRouteImport.update({
  id: '/provider-partner/',
  path: '/provider-partner/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/params': typeof ParamsRoute
  '/run-data': typeof RunDataRoute
  '/admin': typeof AdminIndexRoute
  '/provider-partner': typeof ProviderPartnerIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/params': typeof ParamsRoute
  '/run-data': typeof RunDataRoute
  '/admin': typeof AdminIndexRoute
  '/provider-partner': typeof ProviderPartnerIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/params': typeof ParamsRoute
  '/run-data': typeof RunDataRoute
  '/admin/': typeof AdminIndexRoute
  '/provider-partner/': typeof ProviderPartnerIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/params'
    | '/run-data'
    | '/admin'
    | '/provider-partner'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/params'
    | '/run-data'
    | '/admin'
    | '/provider-partner'
    | '/demo/form/address'
    | '/demo/form/simple'
  id:
    | '__root__'
    | '/'
    | '/params'
    | '/run-data'
    | '/admin/'
    | '/provider-partner/'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ParamsRoute: typeof ParamsRoute
  RunDataRoute: typeof RunDataRoute
  AdminIndexRoute: typeof AdminIndexRoute
  ProviderPartnerIndexRoute: typeof ProviderPartnerIndexRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/run-data': {
      id: '/run-data'
      path: '/run-data'
      fullPath: '/run-data'
      preLoaderRoute: typeof RunDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/params': {
      id: '/params'
      path: '/params'
      fullPath: '/params'
      preLoaderRoute: typeof ParamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/provider-partner/': {
      id: '/provider-partner/'
      path: '/provider-partner'
      fullPath: '/provider-partner'
      preLoaderRoute: typeof ProviderPartnerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ParamsRoute: ParamsRoute,
  RunDataRoute: RunDataRoute,
  AdminIndexRoute: AdminIndexRoute,
  ProviderPartnerIndexRoute: ProviderPartnerIndexRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
